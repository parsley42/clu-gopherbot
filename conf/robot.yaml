--- # Gopherbot should ignore this line, since it breaks the yaml parser
# This is the non-sensitive configuration for Clu, the gopherbot used
# for development with Docker.
# List of users that can issue admin commands like reload, quit. Should be
# a list of user handles / nicks.
AdminContact: "David Parsley, <parsley@linuxjedi.org>"
IgnoreUsers: [ "floyd", "bender" ]
IgnoreUnlistedUsers: true
SecureParameters: true

## Configure the robot connection protocol
{{ $proto := env "GOPHER_PROTOCOL" | default "terminal" }}
Protocol: {{ $proto }}

## Protocol-specific configuration
{{ if eq $proto "slack" }}
{{ .Include "slack.yaml" }}
{{ end }}

{{ if eq $proto "terminal" }}
{{ .Include "terminal.yaml" }}
{{ end }}

{{ $botname := env "GOPHER_BOTNAME" | default "Clu" }}
{{ $botemail := env "GOPHER_BOTMAIL" | default "clu@linuxjedi.org" }}
{{ $botfullname := env "GOPHER_BOTFULLNAME" | default "Clu Gopherbot" }}
{{ $botalias := env "GOPHER_ALIAS" | default "!" }}

BotInfo:
  UserName: {{ $botname }}
  Email: {{ $botemail }}
  FullName: {{ $botfullname }}
  FirstName: {{ $botname }}
  LastName: Gopherbot

Alias: '{{ $botalias }}'

# Brain configuration; this can all be replaced with static configuration
# and encrypted secrets for most robots.
{{ $brain := env "GOPHER_BRAIN" | default "gcpfirestore" }}
{{ $statedir := env "GOPHER_STATE_DIRECTORY" | default "state" }}
{{ $defbraindir := printf "%s/brain" $statedir }}
Brain: {{ $brain }}
#EncryptBrain: true # default
{{ if eq $brain "file" }}
BrainConfig:
  BrainDirectory: {{ env "GOPHER_BRAIN_DIRECTORY" | default $defbraindir }}
  Encode: true
{{ else if eq $brain "dynamo" }}
BrainConfig:
  TableName: "your table name here"
  Region: {{ env "GOPHER_BRAIN_REGION" | default "us-east-1" }}
  AccessKeyID: "replace with encrypted value"
  SecretAccessKey: "replace with encrypted value"
{{ else if eq $brain "cloudflare" }}
BrainConfig:
  AccountID: "cff30e74f111728929b7ce3fb598653e"
  NamespaceID: "4bc7049ea9664613b1d0fdc6b41e15bb"
  MaxAgeHours: 7
  APIToken: {{ decrypt "PV6ETbC08bDuTGGgucSNZNUdVdsXidugDOhaz7TNKveD1gL6RUINoFYFLUQuqxmmbCjby13wjLlvE2oJjkKgOQFXJ0Q=" }}
{{ else if eq $brain "gcpfirestore" }}
BrainConfig:
  Type: "service_account"
  ProjectID: "gopherbot-440716"
  PrivateKeyID: "f7bf622f0a7975de969759c9a3109c9b5b4205"
  PrivateKey: {{ decrypt "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" }}
  ClientEmail: "clu-gopherbot@gopherbot-440716.iam.gser"
  ClientID: "118067560806745295295"
  AuthURI: "https://accounts.google.com/o/oauth2/auth"
  TokenURI: "https://oauth2.googleapis.com/token"
  AuthProviderx509CertURL: "https://www.googleapis.com/oauth2/v1/certs"
  Clientx509CertURL: "https://www.googleapis.com/robot/v1/metadata/x509/clu-gopherbot%40gopherbot-440716.iam.gserviceaccount.com"
  UniverseDomain: "googleapis.com"
  Collection: "CluBrain"
{{ end }}
# End brain config

# Defaults for history and workspace directories, relative to the
# process working directory.
{{ $histdir := env "GOPHER_HISTORY_DIRECTORY" | default "history" }}
{{ $workdir := env "GOPHER_WORKSPACE_DIRECTORY" | default "workspace" }}
{{ if $workdir -}} WorkSpace: {{ $workdir }} {{- end }}

## Configure a history provider
{{ $history := env "GOPHER_HISTORY_PROVIDER" | default "file" }}
HistoryProvider: {{ $history }}

{{ if eq $history "file" }}
HistoryConfig:
  Directory: {{ $histdir }}
  URLPrefix: 'http://localhost:9000'
  LocalPort: ':9000'
{{ end }}
{{ if eq $history "mem" }}
HistoryConfig:
  BufferSize: 131072
  MaxLineLength: 8092
  Truncated: " <...>"
{{ end }}
## End history config

## Later: modify this for other protocols
{{ $defaultjobchannel := "clu-jobs" }}
DefaultJobChannel: {{ env "GOPHER_JOBCHANNEL" | default $defaultjobchannel }}

## If the plugin doesn't specify an outgoing message format, what's the default?
## This will be 'Raw' (unmodified, subject to protocol-specific formatting) if
## not set. 'Variable' will escape special characters like #, @, _, `, etc. so
## those characters can appear in replies. 'Fixed' will send everything in a
## fixed-width font.
#DefaultMessageFormat: Variable # 'Raw' if not specified

# Job scheduling with github.com/robfig/cron, seconds required
ScheduledJobs:
- Name: install-libs
  Schedule: "@init"
{{ if ne $proto "terminal" }}
# These jobs don't run in the terminal connector
# - Name: backup
#   Schedule: "@every 1m"
- Name: logrotate
  Schedule: "0 1 0 * * *"
{{ end }}
# These jobs run even in the terminal connector
- Name: "pause-notifies"
  Schedule: "0 0 8 * * *"
# - Name: init
#   Schedule: "@init" # special Gopherbot syntax, run job during init
# - Name: hello
#   Schedule: "@every 35s" # see: https://godoc.org/github.com/robfig/cron
#   Arguments: # an array of strings; up to the job to parse numbers & bools
#   - "Goodbye, World !!!"

ExternalPlugins:
  "ai":
    Path: plugins/ai.rb
    Description: A trivial plugin wrapping the OpenAI completions API
    ParameterSets:
    - "openai"
  "weather":
    Description: A plugin that uses OpenWeatherMap to report the weather
    Path: plugins/weather.rb
    Parameters:
    - Name: OWM_APIKEY
      Value: {{ decrypt "KYJzQD8jvfq3liQYPovkdgxe86Im2w79l9YgAQlc1rOBybCLKrDzjkTV8WeLyvah1F5H0vrYGIjfjp8Q" }}
    - Name: TEMP_UNITS
      Value: {{ env "GOPHER_OWM_UNITS" | default "imperial" }} # or 'metric'
    - Name: DEFAULT_COUNTRY
      Value: {{ env "GOPHER_OWM_COUNTRY" | default "us" }} # or other ISO 3166 country code
  "chuck":
    Description: A plugin that pipes up whenever The Man's name is mentioned
    Path: plugins/chuck.rb
  "rubytest":
    Description: A trivial ruby plugin for testing and verifying the ruby library
    Path: plugins/rubytest.rb
  "echo":
    Description: Trivial bash plugin
    Privileged: true
    NameSpace: ssh
    ParameterSets:
    - verysecret
    Path: plugins/echo.sh
  "format":
    Description: Plugin that exercises message formats
    Path: plugins/format.sh
  "luademo":
    Description: Sample lua plugin
    Path: plugins/samples/demo.lua
    Privileged: true
  "luahello":
    Description: Lua Hello World / boilerplate
    Path: plugins/samples/hello.lua
  "jsdemo":
    Description: Sample JavaScript plugin
    Path: plugins/samples/demo.js
  "jshello":
    Description: JavaScript Hello World / boilerplate
    Path: plugins/samples/hello.js
  "pythondemo":
    Description: Sample python plugin
    Path: plugins/samples/pythondemo.py
  "rubydemo":
    Description: Sample ruby plugin
    Path: plugins/samples/rubydemo.rb

ExternalTasks:
  "privtest":
    Privileged: true
    Path: tasks/privtest.sh
    NameSpace: manage
  "nonprivtest":
    Path: tasks/privtest.sh
    NameSpace: manage

ExternalJobs:
  "sleep":
    Description: Start a job to sit in the background for a while
    Path: jobs/sleep.sh
  "hello":
    Description: Trivial hello world job for testing
    Path: jobs/hello.sh
    NameSpace: ssh
    ParameterSets:
    - verysecret
    Parameters:
    - Name: NONCE
      Value: "No way, Jack!"
  "init":
    Description: Init job for decrypting a file during startup
    # Needs to be homed to see custom/ and the binary encryption key
    Homed: true
    Path: jobs/init.sh
  "logrotate":
    Path: jobs/logrotate.sh
  "nowhere":
    Description: Simple test for ssh-job wrapper
    Path: jobs/ssh-job.sh
    Parameters:
    - Name: REMOTEHOST
      Value: localhost
    - Name: REMOTETASK
      Value: status

ParameterSets:
  "verysecret":
    Parameters:
    - Name: "VERY_SECRET"
      Value: "I swear I won't tell ANYBODY"
    - Name: "NOT_VERY_SECRET"
      Value: "You really shouldn't publish this!"
  "github-token":
    Description: "GitHub token for performing a variety of tasks"
    Parameters:
    - Name: "GITHUB_TOKEN"
      Value: "{{ decrypt "fdpNIcQnOD0GrlOeQbUfPB0i6iGp+cqn3WPWRum/Ycl/IJZeVsFYFlJjoNhXITTl0TNWJZ8HjUw1jfvjbGr24ENmFUo=" }}"
  "openai":
    Parameters:
    - Name: OPENAI_KEY
      Value: "{{ decrypt "Wr74TfPqRTF3lRYuxk/wlSrFJYsj9Ril9DyS0HoQ/KcbUXStRarnwAl+++Z1usAAkI6MOxcicEpKtq0XEKynRe8y4j2Nx/luSKUQg0by0g==" }}"

NameSpaces:
  "ssh":
    Parameters:
    - Name: "KEYNAME"
      Value: "robot_key"
    - Name: BOT_SSH_PHRASE
      Value: {{ decrypt "CBow8Kg/9iynxBQFWru+EdWAookX7ERVKcUuLEIp9NDZcpm/QDChILq9p0/2X2dCB7gIrJ4=" }}
  "manage":
    AppendParameters:
    - Name: "KEYNAME"
      Value: "manage_key"
    - Name: BOT_SSH_PHRASE
      Value: {{ decrypt "CBow8Kg/9iynxBQFWru+EdWAookX7ERVKcUuLEIp9NDZcpm/QDChILq9p0/2X2dCB7gIrJ4=" }}

DefaultMessageFormat: Raw
# Users the bot should never listen to
#IgnoreUsers: [ "otherbot", "slackbot" ]

## Configuration for sending out email. For Authtype: none, User and Password
## can be left out. Note that sending email will fail if Email isn't set. Note
## for GMail users - for your robot to send email, you'll need to enable less
## secure apps for the sending account. See:
## https://support.google.com/accounts/answer/6010255

MailConfig:
  Mailhost: smtp.gmail.com:587
  Authtype: plain
  User: clu@linuxjedi.org
  Password: {{ decrypt "dIeNE9EID+eXIrutB+8hQQrhBD5cBxSSVzYLlwtj5hX7Lhs/j6uAUl538ro=" }}

## Use Google Authenticator TOTP by default for elevated commands. To use:
## - Ask the robot to 'send launch codes', and it will send you (one time)
##   a string for configuring your Google Authencticator app, and store it's
##   own copy in the robot's brain. You can verify it works with the
##   'check launch code <code>' command.
## - To require a token to be provided before running a given plugin command,
##   add the elevated command(s) to the plugin's ElevatedCommands list, or to
##   ElevateImmediateCommands for commands that require elevation every time
##   regardless of timeout.
## - Configure the elevator by overriding the config for the plugin in
##   'conf/plugins/totp.yaml'

DefaultElevator: builtin-totp
